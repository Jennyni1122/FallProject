activity之间需要传值需要用startActivityForResult()启动，注意Intent之间传值的类型，自定义的Java类要注意序列化问题（LatLonPoint,Serializable）
activity之间需要传值需要用startActivityForResult()启动，注意Intent之间传值的类型，自定义的Java类要注意序列化问题（LatLonPoint,Serializable）
解析问题
== 和 equals问题 基本数据类型用==，对象用equals,你先记得前面这两点，这个问题很复杂的（涉及到堆栈）
String 相关方法（split substring）

//    /**通话1
//     * 发出通知，跌倒通知
//     */
//    private void sendFallNotifycation() {
//        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {
//            /**
//             *  创建通知栏管理工具
//             */
//            NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
//            /**
//             *  实例化通知栏构造器
//             */
//            NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this);
//            /**
//             *  设置Builder
//             */
//            //设置标题
//            mBuilder.setContentTitle("跌倒守护")
//                    //设置内容
//                    .setContentText(fallbean.getDname()+"发生跌倒，请注意！")
//                    //设置大图标
//                    .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.drawable.icon_fall))
//                    //设置小图标
//                    .setSmallIcon(R.drawable.icon_fall)
//                    //设置通知时间
//                    .setWhen(System.currentTimeMillis())
//                    //首次进入时显示效果
//                    .setTicker(fallbean.getDname()+"发生跌倒，请注意！")
//                    //设置通知方式，声音，震动，呼吸灯等效果，这里通知方式为声音
//                    .setDefaults(Notification.DEFAULT_SOUND);
//            //发送通知请求
//            notificationManager.notify(new Random().nextInt(Integer.MAX_VALUE), mBuilder.build());
//        } else {
//
//            int notificationId = new Random().nextInt(Integer.MAX_VALUE);
//            Notification.Builder builder = new Notification.Builder(this, "1"); //与channelId对应
//            //icon title text必须包含，不然影响桌面图标小红点的展示
//            builder.setSmallIcon(android.R.drawable.stat_notify_chat)
//                    .setContentTitle("跌倒守护")
//                    .setContentText(fallbean.getDname()+"发生跌倒，请注意！")
//                    .setNumber(3); //久按桌面图标时允许的此条通知的数量
//            NotificationManager notificationManager = (NotificationManager) this.getSystemService(Context.NOTIFICATION_SERVICE);
//
//
//            NotificationChannel channel = new NotificationChannel("1",
//                    "Channel1", NotificationManager.IMPORTANCE_DEFAULT);
//            channel.enableLights(true); //是否在桌面icon右上角展示小红点
//            channel.setLightColor(Color.GREEN); //小红点颜色
//            channel.setShowBadge(true); //是否在久按桌面图标时显示此渠道的通知
//            notificationManager.createNotificationChannel(channel);
//            notificationManager.notify(notificationId, builder.build());
//
//        }
//    }
//
//
//    /**通知2
//     * 发出通知，围栏通知
//     */
//    private void sendFenceNotifycation() {
//        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {
//            /**
//             *  创建通知栏管理工具
//             */
//            NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
//            /**
//             *  实例化通知栏构造器
//             */
//            NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(this);
//            /**
//             *  设置Builder
//             */
//            //设置标题
//            mBuilder.setContentTitle("跌倒守护")
//                    //设置内容
//                    .setContentText(fallbean.getDname()+"超出设定的安全范围，请注意！")
//                    //设置大图标
//                    .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.drawable.icon_fall))
//                    //设置小图标
//                    .setSmallIcon(R.drawable.icon_fall)
//                    //设置通知时间
//                    .setWhen(System.currentTimeMillis())
//                    //首次进入时显示效果
//                    .setTicker(fallbean.getDname()+"超出设定的围栏范围，请注意！")
//                    //设置通知方式，声音，震动，呼吸灯等效果，这里通知方式为声音
//                    .setDefaults(Notification.DEFAULT_SOUND);
//            //发送通知请求
//            notificationManager.notify(new Random().nextInt(Integer.MAX_VALUE), mBuilder.build());
//        } else {
//
//            int notificationId = new Random().nextInt(Integer.MAX_VALUE);
//            Notification.Builder builder = new Notification.Builder(this, "1"); //与channelId对应
//            //icon title text必须包含，不然影响桌面图标小红点的展示
//            builder.setSmallIcon(android.R.drawable.stat_notify_chat)
//                    .setContentTitle("跌倒守护")
//                    .setContentText(fallbean.getDname()+"超出设定的围栏范围，请注意！")
//                    .setNumber(3); //久按桌面图标时允许的此条通知的数量
//            NotificationManager notificationManager = (NotificationManager) this.getSystemService(Context.NOTIFICATION_SERVICE);
//
//
//            NotificationChannel channel = new NotificationChannel("1",
//                    "Channel1", NotificationManager.IMPORTANCE_DEFAULT);
//            channel.enableLights(true); //是否在桌面icon右上角展示小红点
//            channel.setLightColor(Color.GREEN); //小红点颜色
//            channel.setShowBadge(true); //是否在久按桌面图标时显示此渠道的通知
//            notificationManager.createNotificationChannel(channel);
//            notificationManager.notify(notificationId, builder.build());
//
//        }
//
//    }
